import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables de entorno de Supabase no configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function verificarSincronizacion() {
  console.log('üîç Verificando sincronizaci√≥n con Supabase...');
  console.log('üìç URL:', supabaseUrl);
  console.log('');

  try {
    // 1. Verificar conexi√≥n b√°sica
    console.log('1Ô∏è‚É£ Verificando conexi√≥n b√°sica...');
    const { data: authData, error: authError } = await supabase.auth.getSession();
    if (authError) {
      console.log('‚ö†Ô∏è  Error de autenticaci√≥n:', authError.message);
    } else {
      console.log('‚úÖ Conexi√≥n b√°sica exitosa');
    }

    // 2. Verificar tabla instituciones
    console.log('\n2Ô∏è‚É£ Verificando tabla instituciones...');
    const { data: instituciones, error: errorInst } = await supabase
      .from('instituciones')
      .select('*')
      .limit(5);
    
    if (errorInst) {
      console.log('‚ùå Error en tabla instituciones:', errorInst.message);
      console.log('   C√≥digo:', errorInst.code);
    } else {
      console.log('‚úÖ Tabla instituciones encontrada');
      console.log('   Registros encontrados:', instituciones?.length || 0);
      if (instituciones && instituciones.length > 0) {
        console.log('   Ejemplo:', instituciones[0]);
      }
    }

    // 3. Verificar tabla grupos
    console.log('\n3Ô∏è‚É£ Verificando tabla grupos...');
    const { data: grupos, error: errorGrupos } = await supabase
      .from('grupos')
      .select('*')
      .limit(5);
    
    if (errorGrupos) {
      console.log('‚ùå Error en tabla grupos:', errorGrupos.message);
      console.log('   C√≥digo:', errorGrupos.code);
    } else {
      console.log('‚úÖ Tabla grupos encontrada');
      console.log('   Registros encontrados:', grupos?.length || 0);
      if (grupos && grupos.length > 0) {
        console.log('   Ejemplo:', grupos[0]);
      }
    }

    // 4. Verificar tabla estudiantes
    console.log('\n4Ô∏è‚É£ Verificando tabla estudiantes...');
    const { data: estudiantes, error: errorEst } = await supabase
      .from('estudiantes')
      .select('*')
      .limit(5);
    
    if (errorEst) {
      console.log('‚ùå Error en tabla estudiantes:', errorEst.message);
      console.log('   C√≥digo:', errorEst.code);
    } else {
      console.log('‚úÖ Tabla estudiantes encontrada');
      console.log('   Registros encontrados:', estudiantes?.length || 0);
      if (estudiantes && estudiantes.length > 0) {
        console.log('   Ejemplo:', estudiantes[0]);
      }
    }

    // 5. Verificar conteos por grupo
    if (!errorGrupos && !errorEst && grupos && estudiantes) {
      console.log('\n5Ô∏è‚É£ Verificando conteos por grupo...');
      for (const grupo of grupos) {
        const { count } = await supabase
          .from('estudiantes')
          .select('*', { count: 'exact', head: true })
          .eq('grupo_id', grupo.id);
        
        console.log(`   Grupo ${grupo.nombre}: ${count || 0} estudiantes`);
      }
    }

    // 6. Verificar tabla respuestas_cuestionario
    console.log('\n6Ô∏è‚É£ Verificando tabla respuestas_cuestionario...');
    const { data: respuestas, error: errorResp } = await supabase
      .from('respuestas_cuestionario')
      .select('*')
      .limit(5);
    
    if (errorResp) {
      console.log('‚ùå Error en tabla respuestas_cuestionario:', errorResp.message);
      console.log('   C√≥digo:', errorResp.code);
    } else {
      console.log('‚úÖ Tabla respuestas_cuestionario encontrada');
      console.log('   Registros encontrados:', respuestas?.length || 0);
      if (respuestas && respuestas.length > 0) {
        console.log('   Ejemplo:', respuestas[0]);
      }
    }

    // 7. Resumen final
    console.log('\nüìä RESUMEN DE SINCRONIZACI√ìN:');
    const tablas = [
      { nombre: 'instituciones', error: errorInst, datos: instituciones?.length || 0 },
      { nombre: 'grupos', error: errorGrupos, datos: grupos?.length || 0 },
      { nombre: 'estudiantes', error: errorEst, datos: estudiantes?.length || 0 },
      { nombre: 'respuestas_cuestionario', error: errorResp, datos: respuestas?.length || 0 }
    ];

    let tablasExistentes = 0;
    let totalRegistros = 0;

    tablas.forEach(tabla => {
      if (!tabla.error) {
        tablasExistentes++;
        totalRegistros += tabla.datos;
        console.log(`‚úÖ ${tabla.nombre}: ${tabla.datos} registros`);
      } else {
        console.log(`‚ùå ${tabla.nombre}: No disponible`);
      }
    });

    console.log(`\nüìà Estado general:`);
    console.log(`   Tablas existentes: ${tablasExistentes}/4`);
    console.log(`   Total de registros: ${totalRegistros}`);
    
    if (tablasExistentes === 4 && totalRegistros > 0) {
      console.log('üéâ ¬°Sincronizaci√≥n exitosa! Usando datos reales de Supabase.');
    } else if (tablasExistentes > 0) {
      console.log('‚ö†Ô∏è  Sincronizaci√≥n parcial. Algunas tablas faltan o est√°n vac√≠as.');
    } else {
      console.log('‚ùå Sin sincronizaci√≥n. Usando datos de ejemplo.');
    }

  } catch (error) {
    console.error('üí• Error general:', error.message);
  }
}

verificarSincronizacion();